plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.25.0'
}

mainClassName = 'seedu.address.Main'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '11.0.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

task coverage(type: JacocoReport) {
    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)
    classDirectories.from files(sourceSets.main.output)
    executionData.from files(jacocoTestReport.executionData)
    afterEvaluate {
        classDirectories.from files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*.jar'])
        })
    }
    reports {
        html.required = true
        xml.required = true
    }
}

dependencies {
    String jUnitVersion = '5.4.0'
    String javaFxVersion = '17.0.7'

    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.0'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.7.4'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

shadowJar {
    archiveFileName = 'addressbook.jar'
}

spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat('1.17.0').aosp() // keep general formatting

        importOrder('', 'java', 'javax', 'javafx', 'org', 'com', 'seedu')
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()

        // Align 'case' and 'default' directly under 'switch'
        custom('CS2103T switch-case', { str ->
            // First, fix case/default indentation
            def fixedCases = str.replaceAll(/(?m)^(\s+)case /) { fullMatch, indent ->
                def switchIndent = indent.take(indent.length() - 4) // assume block indentation is 4 spaces
                return switchIndent + 'case '
            }.replaceAll(/(?m)^(\s+)default:/) { fullMatch, indent ->
                def switchIndent = indent.take(indent.length() - 4)
                return switchIndent + 'default:'
            }

            // Then, move child block (return statements) 4 spaces to the left
            def lines = fixedCases.split('\n')
            def result = []
            def insideCase = false
            lines.each { line ->
                if (line.trim().startsWith('case ') || line.trim().startsWith('default:')) {
                    insideCase = true
                    result << line
                } else if (insideCase && line.trim()) {
                    // move 4 spaces to the left, but never negative
                    def currentIndent = line.takeWhile { it == ' ' }.length()
                    def newIndent = Math.max(currentIndent - 4, 0)
                    result << ' ' * newIndent + line.trim()
                } else {
                    insideCase = false
                    result << line
                }
            }

            return result.join('\n') + '\n'
        })
    }
}




defaultTasks 'clean', 'test'
